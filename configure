#!/bin/sh
# Convenience wrapper for easily viewing/setting options that
# the project's CMake scripts will recognize.

# check for `cmake` command
type cmake > /dev/null 2>&1 || {
    echo "\
This package requires CMake, please install it first, then you may
use this configure script to access CMake equivalent functionality.\
" >&2;
    exit 1;
}

command="$0 $*"
sourcedir="$( cd "$( dirname "$0" )" && pwd )"
usage="\
Usage: $0 [OPTION]... [VAR=VALUE]...

  Build Options:
    --generator=GENERATOR       CMake generator to use (see cmake --help)
    --build-type=DIR            CMake build type: [RelWithDebInfo]
                                  - Debug: debugging flags enabled
                                  - MinSizeRel: minimal output size
                                  - Release: optimizations on, debugging off
                                  - RelWithDebInfo: release flags plus debugging
    --build-dir=DIR             place build files in directory [build]
    --bin-dir=DIR               executable directory [build/bin]
    --lib-dir=DIR               library directory [build/lib]
    --with-clang=FILE           path to clang++ executable
    --with-gcc=FILE             path to g++ executable
    --fake-middleware           compiles libcppa with fake middleware (no IPC)
    --with-max-buffer-size=NUM  sets HC_DEFAULT_MAX_BUFFER_SIZE to NUM bytes
    --with-max-queue-size=NUM   sets HC_MAX_CHANNEL_QUEUE_SIZE to NUM bytes

  Installation Directories:
    --prefix=PREFIX             installation directory [/usr/local]

  Required Packages in Non-Standard Locations:
    --with-boost=PATH           path to Boost install root

  Influential Environment Variables (only on first invocation
  per build directory):
    CXX                         C++ compiler command
    CXXFLAGS                    C++ compiler flags
"


# Appends a CMake cache entry definition to the CMakeCacheEntries variable.
#   $1 is the cache entry variable name
#   $2 is the cache entry variable type
#   $3 is the cache entry variable value
append_cache_entry ()
{
    CMakeCacheEntries="$CMakeCacheEntries -D $1:$2=$3"
}

# Creates a build directory via CMake.
#   $1 is the path to a compiler executable.
#   $2 is the suffix of the build directory.
#   $3 is the executable output path.
#   $4 is the library output path.
#   $5 is the CMake generator.
configure ()
{
    CMakeCacheEntries=$CMakeDefaultCache

    if [ -n "$1" ]; then
        append_cache_entry CMAKE_CXX_COMPILER FILEPATH $1
    fi

    if [ -n "$2" ]; then
        workdir="$builddir-$2"
    else
        workdir=$builddir
    fi
    workdirs="$workdirs $workdir"

    if [ -d $workdir ]; then
        # If a build directory exists, check if it has a CMake cache.
        if [ -f $workdir/CMakeCache.txt ]; then
            # If the CMake cache exists, delete it so that this configuration
            # is not tainted by a previous one.
            rm -f $workdir/CMakeCache.txt
        fi
    else
        mkdir -p $workdir
    fi

    cd $workdir

    if [ -n "$5" ]; then
        cmake -G "$5" $CMakeCacheEntries $sourcedir
    else
        cmake $CMakeCacheEntries $sourcedir
    fi

    echo "# This is the command used to configure this build" > config.status
    echo $command >> config.status
    chmod u+x config.status
}

# Set defaults.
builddir="$sourcedir/build"
CMakeCacheEntries=""
append_cache_entry CMAKE_BUILD_TYPE            STRING RelWithDebInfo
append_cache_entry CMAKE_INSTALL_PREFIX        PATH   /usr/local

# Parse arguments.
while [ $# -ne 0 ]; do
    case "$1" in
        -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
        *) optarg= ;;
    esac

    case "$1" in
        --help|-h)
            echo "${usage}" 1>&2
            exit 1
            ;;
        --generator=*)
            CMakeGenerator="$optarg"
            ;;
        --prefix=*)
            append_cache_entry CMAKE_INSTALL_PREFIX PATH $optarg
            ;;
        --with-boost=*)
            append_cache_entry BOOST_ROOT PATH $optarg
            ;;
        --with-clang=*)
            clang=$optarg
            ;;
        --with-gcc=*)
            gcc=$optarg
            ;;
        --build-type=*)
            append_cache_entry CMAKE_BUILD_TYPE STRING $optarg
            ;;
        --build-dir=*)
            builddir=$optarg
            ;;
        --bin-dir=*)
            bindir=$optarg
            ;;
        --lib-dir=*)
            libdir=$optarg
            ;;
        --fake-middleware)
            append_cache_entry HAMCAST_LITE BOOL true
            ;;
        --with-max-buffer-size=*)
            append_cache_entry DEFAULT_MAX_BUFFER_SIZE STRING $optarg
            ;;
        --with-max-queue-size=*)
            append_cache_entry MAX_CHANNEL_QUEUE_SIZE STRING $optarg
            ;;
        *)
            echo "Invalid option '$1'.  Try $0 --help to see available options."
            exit 1
            ;;
    esac
    shift
done

# At this point we save the global CMake variables so that configure() can
# later use them.
CMakeDefaultCache=$CMakeCacheEntries

if [ -n "$dualbuild" ]; then
    # Use what we got in $PATH if --with-clang or --with-gcc is not specified.
    if [ -z "$clang" ]; then
        clang=clang++
    fi
    if [ -z "$gcc" ]; then
        gcc=g++
    fi

    for i in gcc clang; do
        compiler="$(eval echo \$$i)"
        configure $compiler $i "" "" $CMakeGenerator
    done
else
    # Prefer Clang to GCC.
    if [ -n "$clang" ]; then
        compiler=$clang
    elif [ -n "$gcc" ]; then
        compiler=$gcc
    fi

    configure $compiler "" $bindir $libdir $CMakeGenerator
fi

printf "DIRS := %s\n\n" "$workdirs" > $sourcedir/Makefile
makefile=$(cat <<'EOT'
all:
	@for i in $(DIRS); do $(MAKE) -C $$i $@ || exit; done

test:
	@for i in $(DIRS); do $(MAKE) -C $$i $@ || exit; done

install:
	@for i in $(DIRS); do $(MAKE) -C $$i $@ || exit; done

uninstall:
	@for i in $(DIRS); do $(MAKE) -C $$i $@ || exit; done

clean:
	@for i in $(DIRS); do $(MAKE) -C $$i $@; done

distclean:
	rm -rf $(DIRS) Makefile

doc:
	$(MAKE) -C $(firstword $(DIRS)) $@

.PHONY: all test install uninstall clean distclean
EOT
)

echo "$makefile" >> $sourcedir/Makefile
